# Generated by Django 3.2.8 on 2022-04-28 03:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=100, verbose_name='code')),
                ('name_ru', models.CharField(max_length=250, verbose_name='name_ru')),
                ('name_en', models.CharField(max_length=250)),
                ('name_uz', models.CharField(max_length=250)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'db_table': 'country',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=50, verbose_name='Название на русском')),
                ('name_en', models.CharField(max_length=50, verbose_name='Название на английском')),
                ('name_local', models.CharField(max_length=50, verbose_name='Местное название')),
                ('code', models.CharField(blank=True, max_length=3, null=True, unique=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='Point(longitude latitude)', null=True, srid=4326, verbose_name='Location in Map')),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'district',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_ru', models.CharField(max_length=512, verbose_name='Название регион')),
                ('name_en', models.CharField(max_length=512, verbose_name='Name of region')),
                ('name_uz', models.CharField(max_length=512, null=True, verbose_name='Viloyat nomi')),
                ('coefficient', models.DecimalField(decimal_places=4, max_digits=20, null=True)),
                ('limit', models.DecimalField(decimal_places=4, max_digits=20, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='Point(longitude latitude)', null=True, srid=4326, verbose_name='Location in Map')),
            ],
            options={
                'verbose_name_plural': 'Regions',
                'db_table': 'region',
            },
        ),
        migrations.CreateModel(
            name='SamplesSniffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('name_uz', models.CharField(max_length=512, null=True, verbose_name='Viloyat nomi')),
                ('limit', models.DecimalField(decimal_places=4, max_digits=20, null=True)),
            ],
            options={
                'db_table': 'samples_sniffer',
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'POTASSIUM_COEFFICIENT'), (2, 'PHOSPHORUS_COEFFICIENT'), (3, 'EXPENSE'), (4, 'ANOTHER')], default=4)),
                ('name_ru', models.CharField(max_length=512, null=True, verbose_name='Название')),
                ('name_en', models.CharField(max_length=512, null=True, verbose_name='Name')),
                ('name_uz', models.CharField(max_length=512, null=True, verbose_name='Nomi')),
                ('status', models.BooleanField(default=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('val', models.DecimalField(decimal_places=4, max_digits=30, null=True, verbose_name='Qiymati')),
                ('potassium_val', models.DecimalField(decimal_places=4, default=0, max_digits=30, null=True, verbose_name='Kaliy Qiymati')),
                ('phosphorus_val', models.DecimalField(decimal_places=4, default=0, max_digits=30, null=True, verbose_name='Fosfor Qiymati')),
                ('nitrogen_val', models.DecimalField(decimal_places=4, default=0, max_digits=30, null=True, verbose_name='Azot Qiymati')),
                ('code', models.CharField(max_length=512, null=True, verbose_name='Kodi')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='Point(longitude latitude)', null=True, srid=4326, verbose_name='Location in Map')),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coredata.district')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='coredata.region')),
            ],
        ),
        migrations.AddField(
            model_name='district',
            name='region',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='coredata.region', verbose_name='Область'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_role', models.IntegerField(choices=[(0, 'ADMIN'), (1, 'WAREHOUSE MANAGER'), (2, 'COLLECTOR')], default=2)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('status_code', models.BooleanField(blank=True, default=True)),
                ('district', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='coredata.district', verbose_name='District of point')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='coredata.region', verbose_name='Region of point')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
